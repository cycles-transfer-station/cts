
type IcpTokens = record {
    e8s : nat64;
};

// ---------------------------------------------------------------

type SeeUserBalanceQuest = record {
    user : principal;
};

type SeeUserBalanceSponse = variant {
    Ok: UserBalance;
    Err: SeeUserBalanceSponseErr;
};

type UserBalance = record {
    icp_balance : IcpTokens;
    cycles_balance : nat;
};

type SeeUserBalanceSponseErr = variant {

};

// ---------------------------------------------------------------

type ChangeUserBalanceQuest = record {
    user : principal;
    icp_or_cycles_count: IcpOrCyclesCount;
    plus_or_minus: PlusOrMinus;

};

type IcpOrCyclesCount = variant {
    icp: IcpTokens;
    cycles: nat;
};

type PlusOrMinus = variant {
    plus;
    minus;
};

type ChangeUserBalanceSponse = variant {
    Ok;
    Err: ChangeUserBalanceSponseErr;
};

type ChangeUserBalanceSponseErr = variant {
    Error1;
    MinusBalanceBalanceTooLow
    Error2;
};

// ---------------------------------------------------------------

service cts-balance_book : {

    // can only be called by the other cts canisters or by the user 
    // the caller must be either one of the cts canisters or the user
    see_user_balance : (SeeUserBalanceQuest) -> (SeeUserBalanceSponse);









    // this method can only be called by the other cts canisters
    // give back the current balance after the balance-change?
    // how does changing the user's-icp-balance work?
    change_user_balance : (ChangeUserBalanceQuest) -> ();


}
