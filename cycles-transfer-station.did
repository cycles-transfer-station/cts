

type ICPID = blob;         // 32-bytes. see ic ledger.

type ICP = record {        // tokens, measured in 10^-8 of a token.
    e8s : nat64;
};


type CyclesBankPurchaseData = record {
    cycles_bank_principal: principal;
    cost_cycles: nat64; // 64?
    timestamp: nat64;
};


type CyclesTransferPurchaseData = record {
    for: principal;
    cycles_sent: nat;
    cycles_accepted: nat;
    cycles_transfer_memo: CyclesTransferMemo;
    timestamp: nat64;
};





service cycles-transfer-station : {

    // call as caller
    topup_balance : () -> (                       
        record {
            cycles_balance_topup: record {
                topup_cycles_transfer_memo: CyclesTransferMemo;
            };
            icp_balance_topup: record {
                topup_icp_id : ICPID;                  
            };
        }
    );


    see_balance : () -> (
        record {
            cycles_balance: nat;
            icp_balance: ICP; 
        }
    );


    collect_balance : (
        variant {
            icp_payout: record {
                amount: ICP;
                payout_icp_id: blob; 
            };
            cycles_payout: record {
                amount: nat;
                payout_cycles_transfer_canister: principal;         // the memo is: cts-payout    
            };
        }
    ) -> (
        variant {
            icp_payout: variant {
                Ok: null;
                Err: IcpPayoutError;
            };
            cycles_payout: record {
                Ok: nat;                // cycles-paid-out      // put cycles_sent & cycles_accepted? 
                Err: CyclesPayoutError
            }
        }
    );


    convert_icp_balance_to_cycles_with_the_cmc_rate : (
        record { 
            amount: ICP; 
        }
    ) -> (
        variant { 
            Ok: nat;    // cycles 
            Err: ConvertIcpBalanceToCyclesWithTheCmcRateError; 
        }
    );


    purchase_cycles_transfer : (
        record {
            for: principal;
            cycles: nat;
            cycles_transfer_memo: CyclesTransferMemo;
            public: bool;
        }
    ) -> (
        variant {
            Ok: nat;                                                 // cycles-transfer[red]  / put cycles_sent & cycles_accepted? 
            Err: PurchaseCyclesTransferError                        // canister_trap ..
        }
    );

    
    see_cycles_transfer_purchases(
        nat
    ) -> (   // page
        vec CyclesTransferPurchaseData
    );

    
    purchase_cycles_bank : (
        record {}
    ) -> (
        variant {
            Ok: CyclesBankPurchaseData;
            Err: PurchaseCyclesBankError;
        }
    );


    see_cycles_bank_purchases(
        nat
    ) -> (
        vec CyclesBankPurchaseData
    );


    see_fees : (

    ) -> (
        record {
            purchase_cycles_bank_cost_cycles: nat;
            purchase_cycles_transfer_cost_cycles: nat;
            
        }
    );


}