type Account = record { owner : principal; subaccount : opt blob };
type CmcNotifyError = variant {
  Refunded : record { block_index : opt nat64; reason : text };
  InvalidTransaction : text;
  Other : record { error_message : text; error_code : nat64 };
  Processing;
  TransactionTooOld : nat64;
};
type CompleteMintCyclesError = variant {
  MintCyclesError : MintCyclesError;
  UserIsNotInTheMiddleOfAMintCyclesCall;
};
type CyclesInError = variant {
  GenericError : record { message : text; error_code : nat };
  CBIsBusy;
  BadFee : record { expected_fee : nat };
  MsgCyclesTooLow;
};
type CyclesInQuest = record {
  to : Account;
  fee : opt nat;
  memo : opt blob;
  cycles : nat;
};
type CyclesOutError = variant {
  GenericError : record { message : text; error_code : nat };
  CBIsBusy;
  BadFee : record { expected_fee : nat };
  DepositCyclesCallError : record { nat32; text };
  InsufficientFunds : record { balance : nat };
};
type CyclesOutQuest = record {
  fee : opt nat;
  memo : opt blob;
  from_subaccount : opt blob;
  cycles : nat;
  for_canister : principal;
};
type GetLogsBackwardsSponse = record {
  logs : vec record { nat; Log };
  is_last_chunk : bool;
};
type Icrc1TransferQuest = record {
  to : Account;
  fee : opt nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  amount : nat;
};
type LedgerTopupCyclesCmcIcpTransferError = variant {
  IcpTransferCallError : record { nat32; text };
  IcpTransferError : TransferError;
};
type LedgerTopupCyclesCmcNotifyError = variant {
  CmcNotifyTopUpQuestCandidEncodeError : text;
  CmcNotifySponseCandidDecodeError : record {
    candid_error : text;
    candid_bytes : blob;
  };
  CmcNotifyError : CmcNotifyError;
  CmcNotifyCallError : record { nat32; text };
};
type Log = record { ts : nat64; tx : LogTX; fee : opt nat };
type LogTX = record {
  op : Operation;
  ts : opt nat64;
  amt : nat;
  fee : opt nat;
  memo : opt blob;
};
type MetadataValue = variant { Int : int; Nat : nat; Blob : blob; Text : text };
type MintCyclesError = variant {
  GenericError : record { message : text; error_code : nat };
  CBIsBusy;
  MinimumBurnIcp : record { minimum_burn_icp : nat };
  MidCallError : MintCyclesMidCallError;
  LedgerTopupCyclesCmcNotifyRefund : record {
    block_index : nat64;
    reason : text;
  };
  BadFee : record { expected_fee : nat };
  LedgerTopupCyclesCmcIcpTransferError : LedgerTopupCyclesCmcIcpTransferError;
  UserIsInTheMiddleOfADifferentCall : UserIsInTheMiddleOfADifferentCall;
};
type MintCyclesMidCallError = variant {
  LedgerTopupCyclesCmcNotifyError : LedgerTopupCyclesCmcNotifyError;
  CouldNotPerformCmcNotifyCallDueToLowBankCanisterCycles;
};
type MintCyclesQuest = record {
  to : Account;
  fee : opt nat;
  burn_icp : nat;
  burn_icp_transfer_fee : nat;
  memo : opt blob;
};
type MintCyclesSuccess = record {
  mint_cycles_block_height : nat;
  mint_cycles : nat;
};
type MintKind = variant {
  CMC : record { icp_block_height : nat64; caller : principal };
  CyclesIn : record { from_canister : principal };
};
type Operation = variant {
  Burn : record { from : Account; for_canister : principal };
  Mint : record { to : Account; kind : MintKind };
  Xfer : record { to : Account; from : Account };
};
type Result = variant { Ok : MintCyclesSuccess; Err : CompleteMintCyclesError };
type Result_1 = variant { Ok : nat; Err : CyclesInError };
type Result_2 = variant { Ok : nat; Err : CyclesOutError };
type Result_3 = variant { Ok : nat; Err : TransferError_1 };
type Result_4 = variant { Ok : MintCyclesSuccess; Err : MintCyclesError };
type Result_5 = variant { Ok : text; Err : text };
type SupportedStandard = record { url : text; name : text };
type Tokens = record { e8s : nat64 };
type TransferError = variant {
  TxTooOld : record { allowed_window_nanos : nat64 };
  BadFee : record { expected_fee : Tokens };
  TxDuplicate : record { duplicate_of : nat64 };
  TxCreatedInFuture;
  InsufficientFunds : record { balance : Tokens };
};
type TransferError_1 = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type UserIsInTheMiddleOfADifferentCall = variant {
  MintCyclesCall : record { must_call_complete : bool };
};
service : () -> {
  canister_cycles_balance_minus_total_supply : () -> (int) query;
  complete_mint_cycles : (opt principal) -> (Result);
  controller_clear_user_logs_pointers_cache : () -> ();
  cycles_in : (CyclesInQuest) -> (Result_1);
  cycles_out : (CyclesOutQuest) -> (Result_2);
  get_logs_backwards : (Account, opt nat) -> (GetLogsBackwardsSponse) query;
  icrc1_balance_of : (Account) -> (nat) query;
  icrc1_decimals : () -> (nat8) query;
  icrc1_fee : () -> (nat) query;
  icrc1_metadata : () -> (vec record { text; MetadataValue }) query;
  icrc1_minting_account : () -> (opt Account) query;
  icrc1_name : () -> (text) query;
  icrc1_supported_standards : () -> (vec SupportedStandard) query;
  icrc1_symbol : () -> (text) query;
  icrc1_total_supply : () -> (nat) query;
  icrc1_transfer : (Icrc1TransferQuest) -> (Result_3);
  mint_cycles : (MintCyclesQuest) -> (Result_4);
  sns_validate_cycles_out : (CyclesOutQuest) -> (Result_5) query;
}
