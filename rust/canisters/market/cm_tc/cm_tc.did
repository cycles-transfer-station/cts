type Account = record { owner : principal; subaccount : opt vec nat8 };
type CMIcrc1TokenTradeContractInit = record {
  icrc1_token_ledger_transfer_fee : nat;
  cycles_bank_transfer_fee : nat;
  cycles_bank_id : principal;
  icrc1_token_ledger : principal;
  cm_main_id : principal;
  positions_storage_canister_code : CanisterCode;
  trades_storage_canister_code : CanisterCode;
  cts_id : principal;
};
type CanisterCode = record { module_hash : vec nat8; module : vec nat8 };
type ControllerUpgradeCSQuest = record {
  new_canister_code : opt CanisterCode;
  post_upgrade_quest : vec nat8;
  specific_cs : opt vec principal;
};
type CreatePositionQuestLog = record {
  cycles_per_token_rate : nat;
  quantity : nat;
};
type LogStorageType = variant { Positions; Trades };
type PositionKind = variant { Token; Cycles };
type PositionLog = record {
  id : nat;
  positor : principal;
  creation_timestamp_nanos : nat;
  fill_quantity : nat;
  void_position_payout_dust_collection : bool;
  quest : CreatePositionQuestLog;
  mainder_position_quantity : nat;
  fill_average_rate : nat;
  void_position_payout_ledger_transfer_fee : nat64;
  position_kind : PositionKind;
  position_termination : opt PositionTerminationData;
  payouts_fees_sum : nat;
};
type PositionTerminationCause = variant {
  Bump;
  Fill;
  TimePass;
  UserCallVoidPosition;
};
type PositionTerminationData = record {
  timestamp_nanos : nat;
  cause : PositionTerminationCause;
};
type Result = variant { Ok; Err : record { nat32; text } };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : TradeSuccess; Err : TradeError };
type Result_3 = variant { Ok : nat; Err : TransferBalanceError };
type Result_4 = variant { Ok; Err : VoidPositionError };
type StorageCanister = record {
  first_log_id : nat;
  canister_id : principal;
  log_size : nat32;
  length : nat;
};
type TradeCyclesQuest = record {
  payout_tokens_to_subaccount : opt vec nat8;
  posit_transfer_ledger_fee : opt nat;
  return_cycles_to_subaccount : opt vec nat8;
  cycles_per_token_rate : nat;
  cycles : nat;
};
type TradeError = variant {
  CreatePositionLedgerTransferError : TransferError;
  CyclesMarketIsBusy;
  RateCannotBeZero;
  CreatePositionLedgerTransferCallError : record { nat32; text };
  MinimumPosition : record { minimum_cycles : nat; minimum_tokens : nat };
  CallerIsInTheMiddleOfADifferentCallThatLocksTheBalance;
};
type TradeSuccess = record { position_id : nat };
type TradeTokensQuest = record {
  posit_transfer_ledger_fee : opt nat;
  cycles_per_token_rate : nat;
  payout_cycles_to_subaccount : opt vec nat8;
  tokens : nat;
  return_tokens_to_subaccount : opt vec nat8;
};
type TransferBalanceError = variant {
  CyclesMarketIsBusy;
  TransferError : TransferError;
  TransferCallError : record { nat32; text };
  CallerIsInTheMiddleOfADifferentCallThatLocksTheBalance;
};
type TransferBalanceQuest = record {
  to : Account;
  ledger_transfer_fee : opt nat;
  amount : nat;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type UpgradeOutcome = record {
  install_code_result : opt Result;
  start_canister_result : opt Result;
  stop_canister_result : opt Result;
};
type ViewLatestTradesQuest = record { opt_start_before_id : opt nat };
type ViewLatestTradesSponse = record {
  is_last_chunk_on_this_canister : bool;
  trades_data : vec record { nat; nat; nat; nat64; PositionKind };
};
type ViewPositionBookQuest = record { opt_start_greater_than_rate : opt nat };
type ViewPositionBookSponse = record {
  positions_quantities : vec record { nat; nat };
  is_last_chunk : bool;
};
type ViewStorageLogsQuest = record {
  index_key : opt principal;
  opt_start_before_id : opt nat;
};
type ViewVolumeStatsSponse = record {
  volume_cycles : Volume;
  volume_tokens : Volume;
};
type VoidPositionError = variant {
  PositionNotFound;
  CyclesMarketIsBusy;
  WrongCaller;
  MinimumWaitTime : record {
    minimum_wait_time_seconds : nat;
    position_creation_timestamp_seconds : nat;
  };
};
type VoidPositionQuest = record { position_id : nat };
type Volume = record {
  volume_sum : nat;
  volume_7_day : nat;
  volume_24_hour : nat;
  volume_30_day : nat;
};
service : (CMIcrc1TokenTradeContractInit) -> {
  controller_set_stop_calls_flag : (bool) -> ();
  controller_upgrade_log_storage_canisters : (
      ControllerUpgradeCSQuest,
      LogStorageType,
    ) -> (vec record { principal; UpgradeOutcome });
  sns_validate_trade_cycles : (TradeCyclesQuest) -> (Result_1) query;
  sns_validate_trade_tokens : (TradeTokensQuest) -> (Result_1) query;
  sns_validate_transfer_cycles_balance : (TransferBalanceQuest) -> (
      Result_1,
    ) query;
  sns_validate_transfer_token_balance : (TransferBalanceQuest) -> (
      Result_1,
    ) query;
  sns_validate_void_position : (VoidPositionQuest) -> (Result_1) query;
  trade_cycles : (TradeCyclesQuest) -> (Result_2);
  trade_tokens : (TradeTokensQuest) -> (Result_2);
  transfer_cycles_balance : (TransferBalanceQuest) -> (Result_3);
  transfer_token_balance : (TransferBalanceQuest) -> (Result_3);
  view_current_positions : (ViewStorageLogsQuest) -> (vec PositionLog) query;
  view_cycles_position_book : (ViewPositionBookQuest) -> (
      ViewPositionBookSponse,
    ) query;
  view_latest_trades : (ViewLatestTradesQuest) -> (
      ViewLatestTradesSponse,
    ) query;
  view_positions_storage_canisters : () -> (vec StorageCanister) query;
  view_stop_calls_flag : () -> (bool) query;
  view_tokens_position_book : (ViewPositionBookQuest) -> (
      ViewPositionBookSponse,
    ) query;
  view_trades_storage_canisters : () -> (vec StorageCanister) query;
  view_volume_stats : () -> (ViewVolumeStatsSponse) query;
  void_position : (TradeSuccess) -> (Result_4);
}
