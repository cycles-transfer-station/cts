type CMMainInit = record { cycles_bank_id : principal; cts_id : principal };
type CanisterCode = record { module_hash : blob; module : blob };
type CanisterStatusResult = record {
  status : CanisterStatusResultStatus;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : CanisterStatusResultQueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusResultQueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type CanisterStatusResultStatus = variant { stopped; stopping; running };
type ContinueControllerCreateIcrc1TokenTradeContractError = variant {
  ControllerCreateIcrc1TokenTradeContractError : ControllerCreateIcrc1TokenTradeContractError;
  ControllerIsNotInTheMiddleOfAControllerCreateIcrc1TokenTradeContractCall;
};
type ControllerCreateIcrc1TokenTradeContractError = variant {
  TradeContractForTheLedgerAlreadyCreated : TradeContractIdAndLedgerId;
  MidCallError : ControllerCreateIcrc1TokenTradeContractMidCallError;
  CreateCanisterIcrc1TokenTradeContractCallError : record { nat32; text };
  ControllerIsInTheMiddleOfADifferentCall : ControllerIsInTheMiddleOfADifferentCall;
  CyclesBalanceTooLow : record { cycles_balance : nat };
};
type ControllerCreateIcrc1TokenTradeContractMidCallError = variant {
  InstallCodeIcrc1TokenTradeContractCallError : record { nat32; text };
  TCInitCandidEncodeError : text;
};
type ControllerCreateIcrc1TokenTradeContractQuest = record {
  icrc1_ledger_id : principal;
  icrc1_ledger_transfer_fee : nat;
};
type ControllerCreateIcrc1TokenTradeContractSuccess = record {
  trade_contract_canister_id : principal;
};
type ControllerIsInTheMiddleOfADifferentCall = record {
  kind : ControllerIsInTheMiddleOfADifferentCallKind;
  must_call_continue : bool;
};
type ControllerIsInTheMiddleOfADifferentCallKind = variant {
  ControllerCreateIcrc1TokenTradeContract;
};
type ControllerUpgradeCSQuest = record {
  new_canister_code : opt CanisterCode;
  post_upgrade_quest : blob;
  specific_cs : opt vec principal;
};
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  log_visibility : LogVisibility;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type LogStorageType = variant { Positions; Trades };
type LogVisibility = variant { controllers; public };
type MarketCanisterType = variant {
  TradesStorage;
  PositionsStorage;
  TradeContract;
};
type Result = variant {
  Ok : ControllerCreateIcrc1TokenTradeContractSuccess;
  Err : ContinueControllerCreateIcrc1TokenTradeContractError;
};
type Result_1 = variant {
  Ok : ControllerCreateIcrc1TokenTradeContractSuccess;
  Err : ControllerCreateIcrc1TokenTradeContractError;
};
type Result_2 = variant { Ok : Snapshot; Err : record { nat32; text } };
type Result_3 = variant { Ok; Err : record { nat32; text } };
type Result_4 = variant {
  Ok : vec record { principal; UpgradeOutcome };
  Err : record { nat32; text };
};
type Result_5 = variant { Ok : text; Err : text };
type Result_6 = variant { Ok : blob; Err : record { nat32; text } };
type Snapshot = record {
  id : blob;
  total_size : nat64;
  taken_at_timestamp : nat64;
};
type TradeContractData = record {
  tc_module_hash : blob;
  latest_upgrade_timestamp_nanos : nat64;
};
type TradeContractIdAndLedgerId = record {
  icrc1_ledger_canister_id : principal;
  trade_contract_canister_id : principal;
};
type UpgradeOutcome = record {
  take_canister_snapshot_result : opt Result_2;
  install_code_result : opt Result_3;
  start_canister_result : opt Result_3;
  stop_canister_result : opt Result_3;
};
service : (CMMainInit) -> {
  continue_controller_create_trade_contract : () -> (Result);
  controller_create_trade_contract : (
      ControllerCreateIcrc1TokenTradeContractQuest,
    ) -> (Result_1);
  controller_upgrade_tc_log_storage_canisters : (
      principal,
      ControllerUpgradeCSQuest,
      LogStorageType,
    ) -> (Result_4);
  controller_upgrade_tcs : (ControllerUpgradeCSQuest) -> (
      vec record { principal; UpgradeOutcome },
    );
  controller_upload_canister_code : (CanisterCode, MarketCanisterType) -> ();
  sns_validate_controller_create_trade_contract : (
      ControllerCreateIcrc1TokenTradeContractQuest,
    ) -> (Result_5) query;
  view_icrc1_token_trade_contracts : () -> (
      vec record { TradeContractIdAndLedgerId; TradeContractData },
    ) query;
  view_tc_payouts_errors : (principal, nat32) -> (Result_6);
  view_tcs_status : () -> (
      record {
        vec record { principal; CanisterStatusResult };
        vec record { principal; record { nat32; text } };
      },
    );
}
