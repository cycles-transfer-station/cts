


type CollectCyclesBalanceQuest = record {
    cycles: nat;
    payout_cycles_transfer_canister: principal;
};

type CollectCyclesBalanceSponse = variant {
    Ok: nat; // change this nat to a CyclesTransferData { cycles_put_into_the_call, cycles_taken_by_the_cycles_transfer_canister }
    Err: CollectCyclesBalanceError;
};

type CollectCyclesBalanceError = variant {
    InvalidCyclesPayout0Amount;
    BalanceTooLow: record { max_cycles_payout: nat; };
    CyclesTransferCallCandidEncodeError: text;
    CyclesTransferCallError: record { call_error: text; paid_fee: bool; }; // fee_paid: u128 ?
};



service cts-cycles_transferrer : {

    // the caller must be the user
    collect_cycles_balance : (CollectCyclesBalanceQuest) -> (CollectCyclesBalanceSponse);

}

